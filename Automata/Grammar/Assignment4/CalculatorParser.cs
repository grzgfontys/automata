//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Automata\Grammar\Assignment4\Calculator.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Grammar.Assignment4 {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class CalculatorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		KW_PRINT=18, COMP_OPERATOR=19, NUMBER=20, IDENT=21, NEWLINE=22, WHITESPACE=23;
	public const int
		RULE_statements = 0, RULE_statement = 1, RULE_ifStatement = 2, RULE_elseBlock = 3, 
		RULE_whileStatement = 4, RULE_statementBlock = 5, RULE_functionCall = 6, 
		RULE_variableAssignment = 7, RULE_booleanExpression = 8, RULE_expression = 9, 
		RULE_keyword = 10;
	public static readonly string[] ruleNames = {
		"statements", "statement", "ifStatement", "elseBlock", "whileStatement", 
		"statementBlock", "functionCall", "variableAssignment", "booleanExpression", 
		"expression", "keyword"
	};

	private static readonly string[] _LiteralNames = {
		null, "'if'", "'else'", "'while'", "'{'", "'}'", "'('", "','", "')'", 
		"'='", "'!'", "'and'", "'or'", "'^'", "'*'", "'/'", "'+'", "'-'", "'print'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "KW_PRINT", "COMP_OPERATOR", "NUMBER", 
		"IDENT", "NEWLINE", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CalculatorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CalculatorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CalculatorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(CalculatorParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(CalculatorParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CalculatorParser.Eof, 0); }
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 0, RULE_statements);
		int _la;
		try {
			int _alt;
			State = 53;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE) {
					{
					{
					State = 22;
					Match(NEWLINE);
					}
					}
					State = 27;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 28;
				statement();
				State = 37;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 30;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 29;
							Match(NEWLINE);
							}
							}
							State = 32;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==NEWLINE );
						State = 34;
						statement();
						}
						} 
					}
					State = 39;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				}
				State = 43;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 40;
						Match(NEWLINE);
						}
						} 
					}
					State = 45;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 46;
						Match(NEWLINE);
						}
						} 
					}
					State = 51;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 52;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableAssignmentContext variableAssignment() {
			return GetRuleContext<VariableAssignmentContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 59;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_PRINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 55;
				functionCall();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 56;
				ifStatement();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 3);
				{
				State = 57;
				whileStatement();
				}
				break;
			case IDENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 58;
				variableAssignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(CalculatorParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(T__0);
			State = 62;
			booleanExpression(0);
			State = 63;
			statementBlock();
			State = 65;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 64;
				Match(NEWLINE);
				}
				break;
			}
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 67;
				elseBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterElseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitElseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			Match(T__1);
			State = 71;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(T__2);
			State = 74;
			booleanExpression(0);
			State = 75;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(CalculatorParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(CalculatorParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_statementBlock);
		int _la;
		try {
			State = 88;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 77;
				Match(T__3);
				State = 78;
				Match(NEWLINE);
				State = 79;
				statements();
				State = 80;
				Match(NEWLINE);
				State = 81;
				Match(T__4);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 83;
				Match(T__3);
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEWLINE) {
					{
					State = 84;
					Match(NEWLINE);
					}
				}

				State = 87;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 12, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			keyword();
			State = 91;
			Match(T__5);
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 92;
				expression(0);
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__6) {
					{
					State = 93;
					Match(T__6);
					}
				}

				}
				}
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 3145792L) != 0) );
			State = 100;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(CalculatorParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignmentContext variableAssignment() {
		VariableAssignmentContext _localctx = new VariableAssignmentContext(Context, State);
		EnterRule(_localctx, 14, RULE_variableAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			Match(IDENT);
			State = 103;
			Match(T__8);
			State = 104;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanExpressionContext : ParserRuleContext {
		public BooleanExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanExpression; } }
	 
		public BooleanExpressionContext() { }
		public virtual void CopyFrom(BooleanExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NegationContext : BooleanExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public NegationContext(BooleanExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterNegation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitNegation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonContext : BooleanExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMP_OPERATOR() { return GetToken(CalculatorParser.COMP_OPERATOR, 0); }
		public ComparisonContext(BooleanExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndContext : BooleanExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext[] booleanExpression() {
			return GetRuleContexts<BooleanExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression(int i) {
			return GetRuleContext<BooleanExpressionContext>(i);
		}
		public LogicalAndContext(BooleanExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterLogicalAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitLogicalAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedBooleanExpressionContext : BooleanExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public ParenthesizedBooleanExpressionContext(BooleanExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterParenthesizedBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitParenthesizedBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrContext : BooleanExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext[] booleanExpression() {
			return GetRuleContexts<BooleanExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression(int i) {
			return GetRuleContext<BooleanExpressionContext>(i);
		}
		public LogicalOrContext(BooleanExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterLogicalOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitLogicalOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanExpressionContext booleanExpression() {
		return booleanExpression(0);
	}

	private BooleanExpressionContext booleanExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BooleanExpressionContext _localctx = new BooleanExpressionContext(Context, _parentState);
		BooleanExpressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_booleanExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				_localctx = new ComparisonContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 107;
				expression(0);
				State = 108;
				Match(COMP_OPERATOR);
				State = 109;
				expression(0);
				}
				break;
			case 2:
				{
				_localctx = new NegationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 111;
				Match(T__9);
				State = 112;
				booleanExpression(4);
				}
				break;
			case 3:
				{
				_localctx = new ParenthesizedBooleanExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 113;
				Match(T__5);
				State = 114;
				booleanExpression(0);
				State = 115;
				Match(T__7);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 127;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 125;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new LogicalAndContext(new BooleanExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
						State = 119;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 120;
						Match(T__10);
						State = 121;
						booleanExpression(4);
						}
						break;
					case 2:
						{
						_localctx = new LogicalOrContext(new BooleanExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
						State = 122;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 123;
						Match(T__11);
						State = 124;
						booleanExpression(3);
						}
						break;
					}
					} 
				}
				State = 129;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorialContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FactorialContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterFactorial(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitFactorial(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorial(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryOperationContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryOperationContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterBinaryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitBinaryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(CalculatorParser.NUMBER, 0); }
		public LiteralContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NestedVarContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(CalculatorParser.IDENT, 0); }
		public NestedVarContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterNestedVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitNestedVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				_localctx = new LiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 131;
				Match(NUMBER);
				}
				break;
			case IDENT:
				{
				_localctx = new NestedVarContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 132;
				Match(IDENT);
				}
				break;
			case T__5:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 133;
				Match(T__5);
				State = 134;
				expression(0);
				State = 135;
				Match(T__7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 152;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 150;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
					case 1:
						{
						_localctx = new BinaryOperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 139;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 140;
						((BinaryOperationContext)_localctx).op = Match(T__12);
						State = 141;
						expression(4);
						}
						break;
					case 2:
						{
						_localctx = new BinaryOperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 142;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 143;
						((BinaryOperationContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__13 || _la==T__14) ) {
							((BinaryOperationContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 144;
						expression(4);
						}
						break;
					case 3:
						{
						_localctx = new BinaryOperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 145;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 146;
						((BinaryOperationContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__15 || _la==T__16) ) {
							((BinaryOperationContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 147;
						expression(3);
						}
						break;
					case 4:
						{
						_localctx = new FactorialContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 148;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 149;
						Match(T__9);
						}
						break;
					}
					} 
				}
				State = 154;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PRINT() { return GetToken(CalculatorParser.KW_PRINT, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 20, RULE_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(KW_PRINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return booleanExpression_sempred((BooleanExpressionContext)_localctx, predIndex);
		case 9: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool booleanExpression_sempred(BooleanExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 5);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,23,158,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,5,0,24,8,0,10,0,12,0,27,9,0,1,0,1,0,
		4,0,31,8,0,11,0,12,0,32,1,0,5,0,36,8,0,10,0,12,0,39,9,0,1,0,5,0,42,8,0,
		10,0,12,0,45,9,0,1,0,5,0,48,8,0,10,0,12,0,51,9,0,1,0,3,0,54,8,0,1,1,1,
		1,1,1,1,1,3,1,60,8,1,1,2,1,2,1,2,1,2,3,2,66,8,2,1,2,3,2,69,8,2,1,3,1,3,
		1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,86,8,5,1,5,3,5,
		89,8,5,1,6,1,6,1,6,1,6,3,6,95,8,6,4,6,97,8,6,11,6,12,6,98,1,6,1,6,1,7,
		1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,118,8,8,1,
		8,1,8,1,8,1,8,1,8,1,8,5,8,126,8,8,10,8,12,8,129,9,8,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,3,9,138,8,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,
		151,8,9,10,9,12,9,154,9,9,1,10,1,10,1,10,0,2,16,18,11,0,2,4,6,8,10,12,
		14,16,18,20,0,2,1,0,14,15,1,0,16,17,172,0,53,1,0,0,0,2,59,1,0,0,0,4,61,
		1,0,0,0,6,70,1,0,0,0,8,73,1,0,0,0,10,88,1,0,0,0,12,90,1,0,0,0,14,102,1,
		0,0,0,16,117,1,0,0,0,18,137,1,0,0,0,20,155,1,0,0,0,22,24,5,22,0,0,23,22,
		1,0,0,0,24,27,1,0,0,0,25,23,1,0,0,0,25,26,1,0,0,0,26,28,1,0,0,0,27,25,
		1,0,0,0,28,37,3,2,1,0,29,31,5,22,0,0,30,29,1,0,0,0,31,32,1,0,0,0,32,30,
		1,0,0,0,32,33,1,0,0,0,33,34,1,0,0,0,34,36,3,2,1,0,35,30,1,0,0,0,36,39,
		1,0,0,0,37,35,1,0,0,0,37,38,1,0,0,0,38,43,1,0,0,0,39,37,1,0,0,0,40,42,
		5,22,0,0,41,40,1,0,0,0,42,45,1,0,0,0,43,41,1,0,0,0,43,44,1,0,0,0,44,54,
		1,0,0,0,45,43,1,0,0,0,46,48,5,22,0,0,47,46,1,0,0,0,48,51,1,0,0,0,49,47,
		1,0,0,0,49,50,1,0,0,0,50,54,1,0,0,0,51,49,1,0,0,0,52,54,5,0,0,1,53,25,
		1,0,0,0,53,49,1,0,0,0,53,52,1,0,0,0,54,1,1,0,0,0,55,60,3,12,6,0,56,60,
		3,4,2,0,57,60,3,8,4,0,58,60,3,14,7,0,59,55,1,0,0,0,59,56,1,0,0,0,59,57,
		1,0,0,0,59,58,1,0,0,0,60,3,1,0,0,0,61,62,5,1,0,0,62,63,3,16,8,0,63,65,
		3,10,5,0,64,66,5,22,0,0,65,64,1,0,0,0,65,66,1,0,0,0,66,68,1,0,0,0,67,69,
		3,6,3,0,68,67,1,0,0,0,68,69,1,0,0,0,69,5,1,0,0,0,70,71,5,2,0,0,71,72,3,
		10,5,0,72,7,1,0,0,0,73,74,5,3,0,0,74,75,3,16,8,0,75,76,3,10,5,0,76,9,1,
		0,0,0,77,78,5,4,0,0,78,79,5,22,0,0,79,80,3,0,0,0,80,81,5,22,0,0,81,82,
		5,5,0,0,82,89,1,0,0,0,83,85,5,4,0,0,84,86,5,22,0,0,85,84,1,0,0,0,85,86,
		1,0,0,0,86,87,1,0,0,0,87,89,5,5,0,0,88,77,1,0,0,0,88,83,1,0,0,0,89,11,
		1,0,0,0,90,91,3,20,10,0,91,96,5,6,0,0,92,94,3,18,9,0,93,95,5,7,0,0,94,
		93,1,0,0,0,94,95,1,0,0,0,95,97,1,0,0,0,96,92,1,0,0,0,97,98,1,0,0,0,98,
		96,1,0,0,0,98,99,1,0,0,0,99,100,1,0,0,0,100,101,5,8,0,0,101,13,1,0,0,0,
		102,103,5,21,0,0,103,104,5,9,0,0,104,105,3,18,9,0,105,15,1,0,0,0,106,107,
		6,8,-1,0,107,108,3,18,9,0,108,109,5,19,0,0,109,110,3,18,9,0,110,118,1,
		0,0,0,111,112,5,10,0,0,112,118,3,16,8,4,113,114,5,6,0,0,114,115,3,16,8,
		0,115,116,5,8,0,0,116,118,1,0,0,0,117,106,1,0,0,0,117,111,1,0,0,0,117,
		113,1,0,0,0,118,127,1,0,0,0,119,120,10,3,0,0,120,121,5,11,0,0,121,126,
		3,16,8,4,122,123,10,2,0,0,123,124,5,12,0,0,124,126,3,16,8,3,125,119,1,
		0,0,0,125,122,1,0,0,0,126,129,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,
		128,17,1,0,0,0,129,127,1,0,0,0,130,131,6,9,-1,0,131,138,5,20,0,0,132,138,
		5,21,0,0,133,134,5,6,0,0,134,135,3,18,9,0,135,136,5,8,0,0,136,138,1,0,
		0,0,137,130,1,0,0,0,137,132,1,0,0,0,137,133,1,0,0,0,138,152,1,0,0,0,139,
		140,10,4,0,0,140,141,5,13,0,0,141,151,3,18,9,4,142,143,10,3,0,0,143,144,
		7,0,0,0,144,151,3,18,9,4,145,146,10,2,0,0,146,147,7,1,0,0,147,151,3,18,
		9,3,148,149,10,5,0,0,149,151,5,10,0,0,150,139,1,0,0,0,150,142,1,0,0,0,
		150,145,1,0,0,0,150,148,1,0,0,0,151,154,1,0,0,0,152,150,1,0,0,0,152,153,
		1,0,0,0,153,19,1,0,0,0,154,152,1,0,0,0,155,156,5,18,0,0,156,21,1,0,0,0,
		19,25,32,37,43,49,53,59,65,68,85,88,94,98,117,125,127,137,150,152
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
}
