//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Automata\Grammar\Assignment3\Assignment3.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class Assignment3Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, NUMBER=12, VARIABLE=13, WHITESPACE=14, NEWLINE=15;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "NUMBER", "VARIABLE", "WHITESPACE", "NEWLINE", "NONZERO_DIGIT", 
		"ZERO", "DIGIT", "LETTERS"
	};


	public Assignment3Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Assignment3Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "','", "')'", "'='", "'!'", "'^'", "'*'", "'/'", "'+'", "'-'", 
		"'print'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"NUMBER", "VARIABLE", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Assignment3.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Assignment3Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,15,102,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,0,1,1,1,1,1,2,1,2,1,
		3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,
		10,1,10,1,10,1,11,1,11,5,11,68,8,11,10,11,12,11,71,9,11,1,11,3,11,74,8,
		11,1,12,4,12,77,8,12,11,12,12,12,78,1,13,4,13,82,8,13,11,13,12,13,83,1,
		13,1,13,1,14,3,14,89,8,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,3,17,
		99,8,17,1,18,1,18,0,0,19,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
		21,11,23,12,25,13,27,14,29,15,31,0,33,0,35,0,37,0,1,0,3,3,0,9,10,13,13,
		32,32,1,0,49,57,2,0,65,90,97,122,103,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
		0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
		1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
		0,0,29,1,0,0,0,1,39,1,0,0,0,3,41,1,0,0,0,5,43,1,0,0,0,7,45,1,0,0,0,9,47,
		1,0,0,0,11,49,1,0,0,0,13,51,1,0,0,0,15,53,1,0,0,0,17,55,1,0,0,0,19,57,
		1,0,0,0,21,59,1,0,0,0,23,73,1,0,0,0,25,76,1,0,0,0,27,81,1,0,0,0,29,88,
		1,0,0,0,31,92,1,0,0,0,33,94,1,0,0,0,35,98,1,0,0,0,37,100,1,0,0,0,39,40,
		5,40,0,0,40,2,1,0,0,0,41,42,5,44,0,0,42,4,1,0,0,0,43,44,5,41,0,0,44,6,
		1,0,0,0,45,46,5,61,0,0,46,8,1,0,0,0,47,48,5,33,0,0,48,10,1,0,0,0,49,50,
		5,94,0,0,50,12,1,0,0,0,51,52,5,42,0,0,52,14,1,0,0,0,53,54,5,47,0,0,54,
		16,1,0,0,0,55,56,5,43,0,0,56,18,1,0,0,0,57,58,5,45,0,0,58,20,1,0,0,0,59,
		60,5,112,0,0,60,61,5,114,0,0,61,62,5,105,0,0,62,63,5,110,0,0,63,64,5,116,
		0,0,64,22,1,0,0,0,65,69,3,31,15,0,66,68,3,35,17,0,67,66,1,0,0,0,68,71,
		1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,74,1,0,0,0,71,69,1,0,0,0,72,74,
		3,33,16,0,73,65,1,0,0,0,73,72,1,0,0,0,74,24,1,0,0,0,75,77,3,37,18,0,76,
		75,1,0,0,0,77,78,1,0,0,0,78,76,1,0,0,0,78,79,1,0,0,0,79,26,1,0,0,0,80,
		82,7,0,0,0,81,80,1,0,0,0,82,83,1,0,0,0,83,81,1,0,0,0,83,84,1,0,0,0,84,
		85,1,0,0,0,85,86,6,13,0,0,86,28,1,0,0,0,87,89,5,13,0,0,88,87,1,0,0,0,88,
		89,1,0,0,0,89,90,1,0,0,0,90,91,5,10,0,0,91,30,1,0,0,0,92,93,7,1,0,0,93,
		32,1,0,0,0,94,95,5,48,0,0,95,34,1,0,0,0,96,99,3,33,16,0,97,99,3,31,15,
		0,98,96,1,0,0,0,98,97,1,0,0,0,99,36,1,0,0,0,100,101,7,2,0,0,101,38,1,0,
		0,0,7,0,69,73,78,83,88,98,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
