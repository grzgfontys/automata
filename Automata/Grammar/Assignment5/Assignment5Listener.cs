//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Automata\Grammar\Assignment5\Assignment5.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="Assignment5Parser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public interface IAssignment5Listener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="Assignment5Parser.statements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatements([NotNull] Assignment5Parser.StatementsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="Assignment5Parser.statements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatements([NotNull] Assignment5Parser.StatementsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="Assignment5Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] Assignment5Parser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="Assignment5Parser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] Assignment5Parser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="Assignment5Parser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDeclaration([NotNull] Assignment5Parser.FunctionDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="Assignment5Parser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDeclaration([NotNull] Assignment5Parser.FunctionDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DefaultParam</c>
	/// labeled alternative in <see cref="Assignment5Parser.functionParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDefaultParam([NotNull] Assignment5Parser.DefaultParamContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DefaultParam</c>
	/// labeled alternative in <see cref="Assignment5Parser.functionParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDefaultParam([NotNull] Assignment5Parser.DefaultParamContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Param</c>
	/// labeled alternative in <see cref="Assignment5Parser.functionParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParam([NotNull] Assignment5Parser.ParamContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Param</c>
	/// labeled alternative in <see cref="Assignment5Parser.functionParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParam([NotNull] Assignment5Parser.ParamContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="Assignment5Parser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCall([NotNull] Assignment5Parser.FunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="Assignment5Parser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCall([NotNull] Assignment5Parser.FunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="Assignment5Parser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] Assignment5Parser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="Assignment5Parser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] Assignment5Parser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="Assignment5Parser.elseBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseBlock([NotNull] Assignment5Parser.ElseBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="Assignment5Parser.elseBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseBlock([NotNull] Assignment5Parser.ElseBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="Assignment5Parser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] Assignment5Parser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="Assignment5Parser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] Assignment5Parser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="Assignment5Parser.statementBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatementBlock([NotNull] Assignment5Parser.StatementBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="Assignment5Parser.statementBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatementBlock([NotNull] Assignment5Parser.StatementBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="Assignment5Parser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] Assignment5Parser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="Assignment5Parser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] Assignment5Parser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ExpressionAssignment</c>
	/// labeled alternative in <see cref="Assignment5Parser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionAssignment([NotNull] Assignment5Parser.ExpressionAssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ExpressionAssignment</c>
	/// labeled alternative in <see cref="Assignment5Parser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionAssignment([NotNull] Assignment5Parser.ExpressionAssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FunctionAssignment</c>
	/// labeled alternative in <see cref="Assignment5Parser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionAssignment([NotNull] Assignment5Parser.FunctionAssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FunctionAssignment</c>
	/// labeled alternative in <see cref="Assignment5Parser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionAssignment([NotNull] Assignment5Parser.FunctionAssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Initialisation</c>
	/// labeled alternative in <see cref="Assignment5Parser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInitialisation([NotNull] Assignment5Parser.InitialisationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Initialisation</c>
	/// labeled alternative in <see cref="Assignment5Parser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInitialisation([NotNull] Assignment5Parser.InitialisationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Negation</c>
	/// labeled alternative in <see cref="Assignment5Parser.booleanExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNegation([NotNull] Assignment5Parser.NegationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Negation</c>
	/// labeled alternative in <see cref="Assignment5Parser.booleanExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNegation([NotNull] Assignment5Parser.NegationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Comparison</c>
	/// labeled alternative in <see cref="Assignment5Parser.booleanExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparison([NotNull] Assignment5Parser.ComparisonContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Comparison</c>
	/// labeled alternative in <see cref="Assignment5Parser.booleanExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparison([NotNull] Assignment5Parser.ComparisonContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalAnd</c>
	/// labeled alternative in <see cref="Assignment5Parser.booleanExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalAnd([NotNull] Assignment5Parser.LogicalAndContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalAnd</c>
	/// labeled alternative in <see cref="Assignment5Parser.booleanExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalAnd([NotNull] Assignment5Parser.LogicalAndContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesizedBooleanExpression</c>
	/// labeled alternative in <see cref="Assignment5Parser.booleanExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesizedBooleanExpression([NotNull] Assignment5Parser.ParenthesizedBooleanExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesizedBooleanExpression</c>
	/// labeled alternative in <see cref="Assignment5Parser.booleanExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesizedBooleanExpression([NotNull] Assignment5Parser.ParenthesizedBooleanExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalOr</c>
	/// labeled alternative in <see cref="Assignment5Parser.booleanExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalOr([NotNull] Assignment5Parser.LogicalOrContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalOr</c>
	/// labeled alternative in <see cref="Assignment5Parser.booleanExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalOr([NotNull] Assignment5Parser.LogicalOrContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="Assignment5Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesizedExpression([NotNull] Assignment5Parser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="Assignment5Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesizedExpression([NotNull] Assignment5Parser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Factorial</c>
	/// labeled alternative in <see cref="Assignment5Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFactorial([NotNull] Assignment5Parser.FactorialContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Factorial</c>
	/// labeled alternative in <see cref="Assignment5Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFactorial([NotNull] Assignment5Parser.FactorialContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BinaryOperation</c>
	/// labeled alternative in <see cref="Assignment5Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryOperation([NotNull] Assignment5Parser.BinaryOperationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BinaryOperation</c>
	/// labeled alternative in <see cref="Assignment5Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryOperation([NotNull] Assignment5Parser.BinaryOperationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Literal</c>
	/// labeled alternative in <see cref="Assignment5Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral([NotNull] Assignment5Parser.LiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Literal</c>
	/// labeled alternative in <see cref="Assignment5Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral([NotNull] Assignment5Parser.LiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NestedVar</c>
	/// labeled alternative in <see cref="Assignment5Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNestedVar([NotNull] Assignment5Parser.NestedVarContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NestedVar</c>
	/// labeled alternative in <see cref="Assignment5Parser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNestedVar([NotNull] Assignment5Parser.NestedVarContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="Assignment5Parser.functionName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionName([NotNull] Assignment5Parser.FunctionNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="Assignment5Parser.functionName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionName([NotNull] Assignment5Parser.FunctionNameContext context);
}
