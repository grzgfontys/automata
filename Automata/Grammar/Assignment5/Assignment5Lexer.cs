//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Automata\Grammar\Assignment5\Assignment5.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class Assignment5Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, KW_PRINT=20, COMP_OPERATOR=21, NUMBER=22, IDENT=23, 
		WHITESPACE=24;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "KW_PRINT", "COMP_OPERATOR", "NUMBER", "IDENT", "WHITESPACE", 
		"NONZERO_DIGIT", "ZERO", "DIGIT", "LETTER"
	};


	public Assignment5Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Assignment5Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'function'", "','", "'='", "'('", "')'", "'if'", "'else'", "'while'", 
		"'{'", "'}'", "'return'", "'!'", "'and'", "'or'", "'^'", "'*'", "'/'", 
		"'+'", "'-'", "'print'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "KW_PRINT", "COMP_OPERATOR", 
		"NUMBER", "IDENT", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Assignment5.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Assignment5Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,24,171,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,1,
		0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,
		1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,
		13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,
		19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,135,
		8,20,1,21,1,21,5,21,139,8,21,10,21,12,21,142,9,21,1,21,3,21,145,8,21,1,
		22,1,22,1,22,5,22,150,8,22,10,22,12,22,153,9,22,1,23,4,23,156,8,23,11,
		23,12,23,157,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,3,26,168,8,26,1,27,
		1,27,0,0,28,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
		25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
		49,0,51,0,53,0,55,0,1,0,3,3,0,9,10,13,13,32,32,1,0,49,57,2,0,65,90,97,
		122,177,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,
		11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
		0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
		0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
		1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,1,57,1,0,0,0,3,66,1,0,0,0,5,68,1,0,0,
		0,7,70,1,0,0,0,9,72,1,0,0,0,11,74,1,0,0,0,13,77,1,0,0,0,15,82,1,0,0,0,
		17,88,1,0,0,0,19,90,1,0,0,0,21,92,1,0,0,0,23,99,1,0,0,0,25,101,1,0,0,0,
		27,105,1,0,0,0,29,108,1,0,0,0,31,110,1,0,0,0,33,112,1,0,0,0,35,114,1,0,
		0,0,37,116,1,0,0,0,39,118,1,0,0,0,41,134,1,0,0,0,43,144,1,0,0,0,45,146,
		1,0,0,0,47,155,1,0,0,0,49,161,1,0,0,0,51,163,1,0,0,0,53,167,1,0,0,0,55,
		169,1,0,0,0,57,58,5,102,0,0,58,59,5,117,0,0,59,60,5,110,0,0,60,61,5,99,
		0,0,61,62,5,116,0,0,62,63,5,105,0,0,63,64,5,111,0,0,64,65,5,110,0,0,65,
		2,1,0,0,0,66,67,5,44,0,0,67,4,1,0,0,0,68,69,5,61,0,0,69,6,1,0,0,0,70,71,
		5,40,0,0,71,8,1,0,0,0,72,73,5,41,0,0,73,10,1,0,0,0,74,75,5,105,0,0,75,
		76,5,102,0,0,76,12,1,0,0,0,77,78,5,101,0,0,78,79,5,108,0,0,79,80,5,115,
		0,0,80,81,5,101,0,0,81,14,1,0,0,0,82,83,5,119,0,0,83,84,5,104,0,0,84,85,
		5,105,0,0,85,86,5,108,0,0,86,87,5,101,0,0,87,16,1,0,0,0,88,89,5,123,0,
		0,89,18,1,0,0,0,90,91,5,125,0,0,91,20,1,0,0,0,92,93,5,114,0,0,93,94,5,
		101,0,0,94,95,5,116,0,0,95,96,5,117,0,0,96,97,5,114,0,0,97,98,5,110,0,
		0,98,22,1,0,0,0,99,100,5,33,0,0,100,24,1,0,0,0,101,102,5,97,0,0,102,103,
		5,110,0,0,103,104,5,100,0,0,104,26,1,0,0,0,105,106,5,111,0,0,106,107,5,
		114,0,0,107,28,1,0,0,0,108,109,5,94,0,0,109,30,1,0,0,0,110,111,5,42,0,
		0,111,32,1,0,0,0,112,113,5,47,0,0,113,34,1,0,0,0,114,115,5,43,0,0,115,
		36,1,0,0,0,116,117,5,45,0,0,117,38,1,0,0,0,118,119,5,112,0,0,119,120,5,
		114,0,0,120,121,5,105,0,0,121,122,5,110,0,0,122,123,5,116,0,0,123,40,1,
		0,0,0,124,135,5,62,0,0,125,126,5,62,0,0,126,135,5,61,0,0,127,135,5,60,
		0,0,128,129,5,60,0,0,129,135,5,61,0,0,130,131,5,61,0,0,131,135,5,61,0,
		0,132,133,5,33,0,0,133,135,5,61,0,0,134,124,1,0,0,0,134,125,1,0,0,0,134,
		127,1,0,0,0,134,128,1,0,0,0,134,130,1,0,0,0,134,132,1,0,0,0,135,42,1,0,
		0,0,136,140,3,49,24,0,137,139,3,53,26,0,138,137,1,0,0,0,139,142,1,0,0,
		0,140,138,1,0,0,0,140,141,1,0,0,0,141,145,1,0,0,0,142,140,1,0,0,0,143,
		145,3,51,25,0,144,136,1,0,0,0,144,143,1,0,0,0,145,44,1,0,0,0,146,151,3,
		55,27,0,147,150,3,55,27,0,148,150,3,53,26,0,149,147,1,0,0,0,149,148,1,
		0,0,0,150,153,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,46,1,0,0,0,153,
		151,1,0,0,0,154,156,7,0,0,0,155,154,1,0,0,0,156,157,1,0,0,0,157,155,1,
		0,0,0,157,158,1,0,0,0,158,159,1,0,0,0,159,160,6,23,0,0,160,48,1,0,0,0,
		161,162,7,1,0,0,162,50,1,0,0,0,163,164,5,48,0,0,164,52,1,0,0,0,165,168,
		3,51,25,0,166,168,3,49,24,0,167,165,1,0,0,0,167,166,1,0,0,0,168,54,1,0,
		0,0,169,170,7,2,0,0,170,56,1,0,0,0,8,0,134,140,144,149,151,157,167,1,6,
		0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
