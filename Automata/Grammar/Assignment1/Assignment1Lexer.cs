//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Automata/Grammar/Assignment1/Assignment1.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Grammar.Assignment1 {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class Assignment1Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NAME=1, AGE=2, TEL=3, SEMICOLON=4, WHITESPACE=5, NEWLINE=6;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"NAME", "AGE", "TEL", "SEMICOLON", "WHITESPACE", "NEWLINE"
	};


	public Assignment1Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Assignment1Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NAME", "AGE", "TEL", "SEMICOLON", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Assignment1.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Assignment1Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,6,50,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,1,0,1,0,
		4,0,16,8,0,11,0,12,0,17,1,1,1,1,4,1,22,8,1,11,1,12,1,23,1,2,1,2,1,2,4,
		2,29,8,2,11,2,12,2,30,1,3,1,3,1,4,4,4,36,8,4,11,4,12,4,37,1,5,3,5,41,8,
		5,1,5,1,5,4,5,45,8,5,11,5,12,5,46,1,5,1,5,0,0,6,1,1,3,2,5,3,7,4,9,5,11,
		6,1,0,6,1,0,65,90,1,0,97,122,1,0,49,57,1,0,48,57,1,0,43,43,2,0,9,9,32,
		32,56,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
		1,0,0,0,1,13,1,0,0,0,3,19,1,0,0,0,5,25,1,0,0,0,7,32,1,0,0,0,9,35,1,0,0,
		0,11,44,1,0,0,0,13,15,7,0,0,0,14,16,7,1,0,0,15,14,1,0,0,0,16,17,1,0,0,
		0,17,15,1,0,0,0,17,18,1,0,0,0,18,2,1,0,0,0,19,21,7,2,0,0,20,22,7,3,0,0,
		21,20,1,0,0,0,22,23,1,0,0,0,23,21,1,0,0,0,23,24,1,0,0,0,24,4,1,0,0,0,25,
		26,7,4,0,0,26,28,7,2,0,0,27,29,7,3,0,0,28,27,1,0,0,0,29,30,1,0,0,0,30,
		28,1,0,0,0,30,31,1,0,0,0,31,6,1,0,0,0,32,33,5,59,0,0,33,8,1,0,0,0,34,36,
		7,5,0,0,35,34,1,0,0,0,36,37,1,0,0,0,37,35,1,0,0,0,37,38,1,0,0,0,38,10,
		1,0,0,0,39,41,5,13,0,0,40,39,1,0,0,0,40,41,1,0,0,0,41,42,1,0,0,0,42,45,
		5,10,0,0,43,45,5,13,0,0,44,40,1,0,0,0,44,43,1,0,0,0,45,46,1,0,0,0,46,44,
		1,0,0,0,46,47,1,0,0,0,47,48,1,0,0,0,48,49,6,5,0,0,49,12,1,0,0,0,8,0,17,
		23,30,37,40,44,46,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Grammar.Assignment1
