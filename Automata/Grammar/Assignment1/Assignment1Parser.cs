//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Automata/Grammar/Assignment1/Assignment1.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Grammar.Assignment1 {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class Assignment1Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NAME=1, AGE=2, TEL=3, SEMICOLON=4, WHITESPACE=5, NEWLINE=6;
	public const int
		RULE_human = 0, RULE_fullName = 1, RULE_nameAge = 2, RULE_nameTel = 3;
	public static readonly string[] ruleNames = {
		"human", "fullName", "nameAge", "nameTel"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NAME", "AGE", "TEL", "SEMICOLON", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Assignment1.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Assignment1Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Assignment1Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Assignment1Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class HumanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Assignment1Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullNameContext[] fullName() {
			return GetRuleContexts<FullNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullNameContext fullName(int i) {
			return GetRuleContext<FullNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameAgeContext[] nameAge() {
			return GetRuleContexts<NameAgeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameAgeContext nameAge(int i) {
			return GetRuleContext<NameAgeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameTelContext[] nameTel() {
			return GetRuleContexts<NameTelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameTelContext nameTel(int i) {
			return GetRuleContext<NameTelContext>(i);
		}
		public HumanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_human; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAssignment1Listener typedListener = listener as IAssignment1Listener;
			if (typedListener != null) typedListener.EnterHuman(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAssignment1Listener typedListener = listener as IAssignment1Listener;
			if (typedListener != null) typedListener.ExitHuman(this);
		}
	}

	[RuleVersion(0)]
	public HumanContext human() {
		HumanContext _localctx = new HumanContext(Context, State);
		EnterRule(_localctx, 0, RULE_human);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 11;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 8;
					fullName();
					}
					break;
				case 2:
					{
					State = 9;
					nameAge();
					}
					break;
				case 3:
					{
					State = 10;
					nameTel();
					}
					break;
				}
				}
				State = 13;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NAME );
			State = 15;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(Assignment1Parser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(Assignment1Parser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE() { return GetToken(Assignment1Parser.WHITESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(Assignment1Parser.SEMICOLON, 0); }
		public FullNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAssignment1Listener typedListener = listener as IAssignment1Listener;
			if (typedListener != null) typedListener.EnterFullName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAssignment1Listener typedListener = listener as IAssignment1Listener;
			if (typedListener != null) typedListener.ExitFullName(this);
		}
	}

	[RuleVersion(0)]
	public FullNameContext fullName() {
		FullNameContext _localctx = new FullNameContext(Context, State);
		EnterRule(_localctx, 2, RULE_fullName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			Match(NAME);
			State = 18;
			Match(WHITESPACE);
			State = 19;
			Match(NAME);
			State = 20;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameAgeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Assignment1Parser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE() { return GetToken(Assignment1Parser.WHITESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGE() { return GetToken(Assignment1Parser.AGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(Assignment1Parser.SEMICOLON, 0); }
		public NameAgeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameAge; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAssignment1Listener typedListener = listener as IAssignment1Listener;
			if (typedListener != null) typedListener.EnterNameAge(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAssignment1Listener typedListener = listener as IAssignment1Listener;
			if (typedListener != null) typedListener.ExitNameAge(this);
		}
	}

	[RuleVersion(0)]
	public NameAgeContext nameAge() {
		NameAgeContext _localctx = new NameAgeContext(Context, State);
		EnterRule(_localctx, 4, RULE_nameAge);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			Match(NAME);
			State = 23;
			Match(WHITESPACE);
			State = 24;
			Match(AGE);
			State = 25;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameTelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Assignment1Parser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE() { return GetToken(Assignment1Parser.WHITESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEL() { return GetToken(Assignment1Parser.TEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(Assignment1Parser.SEMICOLON, 0); }
		public NameTelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameTel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAssignment1Listener typedListener = listener as IAssignment1Listener;
			if (typedListener != null) typedListener.EnterNameTel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAssignment1Listener typedListener = listener as IAssignment1Listener;
			if (typedListener != null) typedListener.ExitNameTel(this);
		}
	}

	[RuleVersion(0)]
	public NameTelContext nameTel() {
		NameTelContext _localctx = new NameTelContext(Context, State);
		EnterRule(_localctx, 6, RULE_nameTel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			Match(NAME);
			State = 28;
			Match(WHITESPACE);
			State = 29;
			Match(TEL);
			State = 30;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,6,33,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,1,0,1,0,1,0,4,0,12,8,0,11,0,12,
		0,13,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
		3,1,3,0,0,4,0,2,4,6,0,0,31,0,11,1,0,0,0,2,17,1,0,0,0,4,22,1,0,0,0,6,27,
		1,0,0,0,8,12,3,2,1,0,9,12,3,4,2,0,10,12,3,6,3,0,11,8,1,0,0,0,11,9,1,0,
		0,0,11,10,1,0,0,0,12,13,1,0,0,0,13,11,1,0,0,0,13,14,1,0,0,0,14,15,1,0,
		0,0,15,16,5,0,0,1,16,1,1,0,0,0,17,18,5,1,0,0,18,19,5,5,0,0,19,20,5,1,0,
		0,20,21,5,4,0,0,21,3,1,0,0,0,22,23,5,1,0,0,23,24,5,5,0,0,24,25,5,2,0,0,
		25,26,5,4,0,0,26,5,1,0,0,0,27,28,5,1,0,0,28,29,5,5,0,0,29,30,5,3,0,0,30,
		31,5,4,0,0,31,7,1,0,0,0,2,11,13
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Grammar.Assignment1
