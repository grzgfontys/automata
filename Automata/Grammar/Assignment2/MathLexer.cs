//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Grammar/Assignment2/Math.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Grammar.Assignment2 {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class MathLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, NUMBER=7, WHITESPACE=8;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "NUMBER", "WHITESPACE", 
		"NONZERO_DIGIT", "ZERO", "DIGIT"
	};


	public MathLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MathLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'*'", "'/'", "'+'", "'-'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "NUMBER", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Math.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MathLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,8,57,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
		1,4,1,5,1,5,1,6,1,6,5,6,38,8,6,10,6,12,6,41,9,6,1,7,4,7,44,8,7,11,7,12,
		7,45,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,3,10,56,8,10,0,0,11,1,1,3,2,5,3,
		7,4,9,5,11,6,13,7,15,8,17,0,19,0,21,0,1,0,2,3,0,9,10,13,13,32,32,1,0,49,
		57,56,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
		1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,1,23,1,0,0,0,3,25,1,0,0,0,5,27,1,0,0,
		0,7,29,1,0,0,0,9,31,1,0,0,0,11,33,1,0,0,0,13,35,1,0,0,0,15,43,1,0,0,0,
		17,49,1,0,0,0,19,51,1,0,0,0,21,55,1,0,0,0,23,24,5,42,0,0,24,2,1,0,0,0,
		25,26,5,47,0,0,26,4,1,0,0,0,27,28,5,43,0,0,28,6,1,0,0,0,29,30,5,45,0,0,
		30,8,1,0,0,0,31,32,5,40,0,0,32,10,1,0,0,0,33,34,5,41,0,0,34,12,1,0,0,0,
		35,39,3,17,8,0,36,38,3,21,10,0,37,36,1,0,0,0,38,41,1,0,0,0,39,37,1,0,0,
		0,39,40,1,0,0,0,40,14,1,0,0,0,41,39,1,0,0,0,42,44,7,0,0,0,43,42,1,0,0,
		0,44,45,1,0,0,0,45,43,1,0,0,0,45,46,1,0,0,0,46,47,1,0,0,0,47,48,6,7,0,
		0,48,16,1,0,0,0,49,50,7,1,0,0,50,18,1,0,0,0,51,52,5,48,0,0,52,20,1,0,0,
		0,53,56,3,19,9,0,54,56,3,17,8,0,55,53,1,0,0,0,55,54,1,0,0,0,56,22,1,0,
		0,0,4,0,39,45,55,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Grammar.Assignment2
